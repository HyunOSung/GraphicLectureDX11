1. Win32 및 COM API를 활용해 Direct3D를 보여주기 위한 윈도우를 생성할 수 있다.
-Day1

헤더 작성 : Appwindow 헤더 - DXApp 헤더 - 엔진 헤더 
CPP 작성 : 메인앱 - 앱 윈도우 - 디엑스 앱 - 엔진

2. Direct3D 객체와 Direct3D Device 객체를 생성해 Direct3D를 초기화할 수 있다.

헤더 작성 : 디엑스유틸 - 디엑스 앱 - 엔진
CPP 작성 : 디엑스 앱 - 앱 윈도우 - 엔진

3. Direct3D Device 객체의 Clear 함수를 통해 배경색을 변경할 수 있다.
clearRenderTarget

4. DirectX에서 제공하는 정점 포맷을 상황에 맞게 정의하고
(예: 정점의 위치와 정점의 색상을 갖는 정점 포맷 정의), 
버텍스 버퍼를 생성해 화면에 메쉬를 그릴 수 있다.

헤더 : 셰이더 - 버텍스셰이더 - 픽셀 셰이더 - 메시
CPP : 셰이더 - 버텍스셰이더 - 픽셀 셰이더 - 메시 - 엔진(뷰포트 생성) - DX앱,유틸 수정

5. DirectX에서 제공하는 행렬 타입을 이용해 월드 변환 적용할 수 있다.
헤더 : 메시 - 엔진
cpp : 메시 - 엔진

6. 뷰변환에 필요한 인자들을 설정하고 뷰변환을 적용할 수 있다.
헤더 : 엔진
cpp : 엔진
셰이더 : 버텍스

7. 투영변환에 필요한 인자들을 설정하고 투영변환을 적용할 수 있다.
헤더 : 엔진
cpp : 엔진
셰이더 : 버텍스

8. UV 좌표를 설정할 수 있도록 정점 포맷을 선언하고 이를 활용해 화면에 그려진 메쉬에 텍스처 매핑을 적용할 수 있다.
헤더 : 텍스쳐 - 픽셀 셰이더 - 메쉬
cpp : 텍스쳐 - 픽셀 셰이더 - 메쉬
셰이더 :  버텍스 셰이더 - 픽셀 셰이더


9. 인덱스 버퍼를 활용해 8개의 정점으로 정육면체를 화면에 그릴 수 있다.
- 진행중, 카메라 각도 해결 못함

10. HLSL 코드로 상황에 맞는 시맨틱(Semantic)을 적용해 정점 입력과 출력에 사용될 구조체를 정의할 수 있다
(예: 입력)정점 위치, 출력)정점 위치, 정점 색상,)

11. FBX 파일로 저장된 메쉬를 로드해 화면에 그릴 수 있다.

12. 1인칭 시점에 적합한 카메라 클래스를 구현할 수 있다.

13. HLSL을 활용해 디퓨즈(난반사) 셰이더를 작성할 수 있다.

14. HLSL을 활용해 스페큘러(정반사) 셰이더를 작성할 수 있다.

15. 정점의 노멀 정보와 노멀맵 텍스처를 이용해 노멀매핑을 적용할 수 있다.

16. 툰 셰이딩 효과를 구현할 수 있다.